{"ast":null,"code":"import { api } from \"./httpService\";\nconst getPosts = async function () {\n  let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'asc';\n  try {\n    const response = await api.get(`/posts?order=${order}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nconst createPost = async pNewPost => {\n  try {\n    const response = await api.post(\"/posts\", pNewPost);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nconst getPostsByUserId = async userId => {\n  try {\n    const response = await api.get(`/posts?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nconst getPostById = async postId => {\n  try {\n    const response = await api.get(`/posts/${postId}`);\n    console.log(response, \"response bu iste\");\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nconst generatePdf = async postId => {\n  try {\n    // Send GET request to /generate-pdf endpoint\n    const response = await api.get(`/posts/pdf/${postId}`, {\n      responseType: 'blob',\n      // Set the response type to 'blob' to receive binary data\n      headers: {\n        'Content-Type': 'application/pdf'\n      }\n    });\n    const blob = response.data;\n\n    // Create a download link and trigger download\n    const downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(blob);\n    downloadLink.download = `post_${postId}.pdf`;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  } catch (error) {\n    console.error('Failed to generate PDF:', error);\n  }\n};\nconst postService = {\n  getPosts,\n  createPost,\n  getPostsByUserId,\n  getPostById,\n  generatePdf\n};\nexport default postService;","map":{"version":3,"names":["api","getPosts","order","arguments","length","undefined","response","get","data","error","console","createPost","pNewPost","post","getPostsByUserId","userId","getPostById","postId","log","status","generatePdf","responseType","headers","blob","downloadLink","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","postService"],"sources":["C:/Users/zgurb/Desktop/zngtech03/zngtech03-client-fe/src/services/postService.js"],"sourcesContent":["import {api} from \"./httpService\"\n\nconst getPosts = async (order = 'asc') => {\n  try {\n    const response = await api.get(`/posts?order=${order}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n\n\nconst createPost = async (pNewPost) => {\n  try {\n    const response = await api.post(\"/posts\", pNewPost);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nconst getPostsByUserId = async (userId) => {\n  try {\n    const response = await api.get(`/posts?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nconst getPostById = async (postId) => {\n  try {\n    const response = await api.get(`/posts/${postId}`);\n    console.log(response,\"response bu iste\");\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nconst generatePdf = async (postId) => {\n  try {\n    // Send GET request to /generate-pdf endpoint\n    const response = await api.get(`/posts/pdf/${postId}`, {\n      responseType: 'blob', // Set the response type to 'blob' to receive binary data\n      headers: {\n        'Content-Type': 'application/pdf',\n      },\n    });\n    const blob = response.data\n\n    // Create a download link and trigger download\n    const downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(blob);\n    downloadLink.download = `post_${postId}.pdf`; \n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  } catch (error) {\n    console.error('Failed to generate PDF:', error);\n  }\n}\nconst postService = {\n  getPosts,\n  createPost,\n  getPostsByUserId,\n  getPostById,\n  generatePdf\n};\n\nexport default postService;\n"],"mappings":"AAAA,SAAQA,GAAG,QAAO,eAAe;AAEjC,MAAMC,QAAQ,GAAG,eAAAA,CAAA,EAAyB;EAAA,IAAlBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACnC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAE,gBAAeL,KAAM,EAAC,CAAC;IACvD,OAAOI,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;AAID,MAAME,UAAU,GAAG,MAAOC,QAAQ,IAAK;EACrC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;IACnD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMK,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACzC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAE,iBAAgBQ,MAAO,EAAC,CAAC;IACzD,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMO,WAAW,GAAG,MAAOC,MAAM,IAAK;EACpC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAE,UAASU,MAAO,EAAC,CAAC;IAClDP,OAAO,CAACQ,GAAG,CAACZ,QAAQ,EAAC,kBAAkB,CAAC;IACxC,IAAIA,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOb,QAAQ,CAACE,IAAI;IACtB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMW,WAAW,GAAG,MAAOH,MAAM,IAAK;EACpC,IAAI;IACF;IACA,MAAMX,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAE,cAAaU,MAAO,EAAC,EAAE;MACrDI,YAAY,EAAE,MAAM;MAAE;MACtBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAGjB,QAAQ,CAACE,IAAI;;IAE1B;IACA,MAAMgB,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IAChDF,YAAY,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IAC7CC,YAAY,CAACM,QAAQ,GAAI,QAAOb,MAAO,MAAK;IAC5CQ,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,YAAY,CAAC;IACvCA,YAAY,CAACS,KAAK,CAAC,CAAC;IACpBR,QAAQ,CAACM,IAAI,CAACG,WAAW,CAACV,YAAY,CAAC;EACzC,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AACD,MAAM0B,WAAW,GAAG;EAClBlC,QAAQ;EACRU,UAAU;EACVG,gBAAgB;EAChBE,WAAW;EACXI;AACF,CAAC;AAED,eAAee,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}